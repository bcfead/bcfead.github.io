import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as l,a as e,b as n,d as t,e as a}from"./app-66476e01.js";const r={},d=a(`<blockquote><p>开源工具、效率方法、心理学探索的自我提升笔记</p></blockquote><h2 id="✨-初衷" tabindex="-1"><a class="header-anchor" href="#✨-初衷" aria-hidden="true">#</a> ✨ 初衷</h2><p>曾经，我把知识记录在 Notion、Obsidian、飞书等知识管理软件上，导致笔记散落各处，使用起来很麻烦，也难以对外分享。</p><p>更重要的是，<strong>笔记里的知识并不属于你，只有经过消化、应用，才会成为自己的知识。</strong></p><p>因此，我基于 VuePress 和 vuepress-theme-hope 建立了 LearnData，将所有笔记与文章重新整合，聚合到同一页面形成知识库，方便自己使用和分享。</p><h2 id="🧱-笔记结构" tabindex="-1"><a class="header-anchor" href="#🧱-笔记结构" aria-hidden="true">#</a> 🧱 笔记结构</h2><ul><li>置顶：日常习惯、健身、阅读；</li><li>代码：常用代码的学习和使用笔记；</li><li>软件应用：常用应用、Chrome 扩展和相关教程；</li><li>页面开发：页面插件和框架生成工具；</li><li>网站部署：网站相关的工具和知识收集；</li><li>Linux 服务：NAS 和服务器上的后端应用，主要以 Docker 方式部署；</li><li>系统问题：Windows 系统优化和相关问题；</li><li>生活区：说明书、生活记录和小技巧；</li><li>博客区：聚合所有博客文章，以分类、标签、时间轴等方式进行组合。</li></ul><h2 id="🍥-搭建-learndata" tabindex="-1"><a class="header-anchor" href="#🍥-搭建-learndata" aria-hidden="true">#</a> 🍥 搭建 LearnData</h2><h2 id="🔣-配置-learndata" tabindex="-1"><a class="header-anchor" href="#🔣-配置-learndata" aria-hidden="true">#</a> 🔣 配置 LearnData</h2><h3 id="文档结构" tabindex="-1"><a class="header-anchor" href="#文档结构" aria-hidden="true">#</a> 文档结构</h3><p>LearnData 的网站配置和文本存放在 <code>docs</code> 文件夹下，文章与页面配置可参考主目录下的 <code>samplepage.md</code>。</p><p>docs 目录结构如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>docs
<span class="token operator">|</span>── .vuepress               <span class="token comment"># 网站配置</span>
│   ├── config.ts           <span class="token comment"># 网站环境依赖和网站属性</span>
│   ├── sidebar.ts          <span class="token comment"># 侧边栏</span>
│   ├── navbar.ts           <span class="token comment"># 导航栏</span>
│   ├── theme.ts            <span class="token comment"># 主题和插件</span>
│   └── templateBuild.html  <span class="token comment"># 网页模板，网站关键词和统计</span>
<span class="token operator">|</span>── _posts                  <span class="token comment"># 博客文章目录</span>
├── _temp                   <span class="token comment"># 草稿箱</span>
├── reading                 <span class="token comment"># 读书笔记</span>
├── anyname                 <span class="token comment"># 自定义笔记</span>
├── blog.md                 <span class="token comment"># 博客页面</span>
└── intro.md                <span class="token comment"># 博主个人介绍</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读书笔记" tabindex="-1"><a class="header-anchor" href="#读书笔记" aria-hidden="true">#</a> 读书笔记</h3><p>读书笔记中可能会有大量的原文引用，这与 LearnData 精简化知识点的初衷并不相符。因此，我们使用 docsify 来构建读书笔记，并将其放置于 <code>docs/reading</code> 目录下。在生成静态页面后，该路径下的文件不会被转换为 HTML 文件，而是将被自动复制到静态网站下，完成 docsify 页面构建和独立的读书笔记搜索索引。</p><p>如果你没有部署 Waline，也不需要阅读量统计和评论区，可以删除 <code>docs\\reading\\index.html</code> 中的 Waline 区块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">waline</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">serverURL</span><span class="token operator">:</span> <span class="token string">&quot;https://waline.newzone.top&quot;</span><span class="token punctuation">,</span>
   <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本地图片引用" tabindex="-1"><a class="header-anchor" href="#本地图片引用" aria-hidden="true">#</a> 本地图片引用</h3><p>为了避免在生成静态页面时出现 <code>Rollup failed to resolve import</code> 错误，本地图片必须保存在 <code>docs/.vuepress/public</code> 路径下。如果图片名称为 <code>1.png</code>，保存在 <code>docs/.vuepress/public/imgs</code> 路径下，则可以使用以下链接来引用该图片：<code>/imgs/1.png</code> 或使用 Markdown 图片链接：<code>![](/imgs/1.png)</code>。本方法也适用于将附件部署到网站上。</p><h2 id="🖥️-网站部署" tabindex="-1"><a class="header-anchor" href="#🖥️-网站部署" aria-hidden="true">#</a> 🖥️ 网站部署</h2><p>在将 LearnData 推送到 GitHub 后，会自动生成可访问的网页。但由于国内访问 GitHub Pages 的速度不稳定，为了确保网站能够正常访问，建议增加国内的访问节点。</p><p>很多人选择使用 Gitee Pages 作为国内节点，通过 GitHub Actions 将新文档同步到 Gitee 上，从而生成位于国内的静态页面 Gitee Pages。但是，Gitee Pages 有很多限制，例如必须实名认证、免费版无法自定义域名，近期也发生过下架风波。因此，我没有选择 Gitee，而是将文档同步到国内服务器（域名需要备案）或 Vercel（国外服务可能会出现断网）。</p><h3 id="同步到服务器" tabindex="-1"><a class="header-anchor" href="#同步到服务器" aria-hidden="true">#</a> 同步到服务器</h3><p>如果你的项目已经搭建好，但出现了红色的叉叉提示，这可能是 GitHub Actions 同步到服务器时发生了错误。你需要进入项目仓库的「Setting」&gt;「Secrets」&gt;「Action」，并添加 <code>FTP_HOST</code>、<code>FTP_PORT</code>、<code>FTP_USERNAME</code> 和 <code>FTP_PASSWORD</code> 的密钥。之后，每当文件发生变化时，GitHub Actions 就会将修改推送到服务器的 FTP 上。</p>`,24),p=e("code",null,".github/workflows/main.yml",-1),u={href:"https://newzone.top/deploy/Static.html#%E5%90%8C%E6%AD%A5%E5%88%B0-oss",target:"_blank",rel:"noopener noreferrer"},h=e("h3",{id:"部署到-vercel",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#部署到-vercel","aria-hidden":"true"},"#"),n(" 部署到 Vercel")],-1),m=e("p",null,"Vercel 的速度比 GitHub Pages 稳定一些，不过「*.vercel.app」域名已经被 DNS 污染。建议国内用户绑定自定义域名以获得更好的使用体验。",-1),b=e("p",null,"Vercel 部署步骤如下：",-1),v={href:"https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Frockbenben%2FLearnData%2Ftree%2Fgh-pages",target:"_blank",rel:"noopener noreferrer"},k=e("img",{src:"https://vercel.com/button",alt:"Vercel",loading:"lazy"},null,-1),g=e("code",null,"https://vercel.com/new/clone?repository-url=https://github.com/rockbenben/LearnData/tree/gh-pages",-1),_=e("code",null,"rockbenben/LearnData",-1),f=e("code",null,"你的用户名/仓库名",-1),y=a('<li><p>输入一个你喜欢的 Vercel 项目名称，默认 private 即可，然后点击 <code>Create</code>。</p><figure><img src="https://img.newzone.top/2022-08-24-17-24-16.png" alt="" tabindex="0" loading="lazy"><figcaption>创建 Vercel 项目</figcaption></figure></li><li><p>接着，Vercel 会基于 LearnData 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。几十秒后，满屏的烟花会庆祝你部署成功。此时，点击 <code>Go to Dashboard</code> 跳转到应用的控制台。</p><figure><img src="https://img.newzone.top/2022-08-24-17-21-58.png" alt="" tabindex="0" loading="lazy"><figcaption>Vercel 部署成功提示</figcaption></figure></li>',2),x=e("p",null,[n("为了让 Vercel 页面与 GitHub Pages 自动保持同步更新，你需要配置 "),e("code",null,"PERSONAL_TOKEN"),n(" 和 GitHub Actions。")],-1),V={href:"https://github.com/settings/tokens",target:"_blank",rel:"noopener noreferrer"},P=e("li",null,"在项目仓库中选择「setting」>「Secrets」>「Action」，新建密钥 PERSONAL_TOKEN，并填入刚复制的 token 值。",-1),L=e("li",null,[n("将下方代码编辑到 "),e("code",null,".github/workflows/main.yml"),n(" 文件末尾，注意修改 "),e("code",null,"dst_owner"),n(" 和 "),e("code",null,"dst_repo_name"),n("。")],-1),w=a(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 将页面更新到 Vercel</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Copy file to Vercel
  <span class="token key atrule">if</span><span class="token punctuation">:</span> always()
  <span class="token key atrule">uses</span><span class="token punctuation">:</span> andstor/copycat<span class="token punctuation">-</span>action@v3
  <span class="token key atrule">with</span><span class="token punctuation">:</span>
    <span class="token key atrule">personal_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PERSONAL_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token key atrule">src_path</span><span class="token punctuation">:</span> /.
    <span class="token key atrule">dst_path</span><span class="token punctuation">:</span> /
    <span class="token comment"># 你的用户名</span>
    <span class="token key atrule">dst_owner</span><span class="token punctuation">:</span> rockbenben
    <span class="token comment"># 与 Vercel 链接的仓库名，也就是 Vercel 部署时新建的仓库</span>
    <span class="token key atrule">dst_repo_name</span><span class="token punctuation">:</span> LearnData<span class="token punctuation">-</span>Vercel
    <span class="token key atrule">dst_branch</span><span class="token punctuation">:</span> main
    <span class="token key atrule">src_branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages
    <span class="token key atrule">clean</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),G=a('<h2 id="🤔-常见问题" tabindex="-1"><a class="header-anchor" href="#🤔-常见问题" aria-hidden="true">#</a> 🤔 常见问题</h2><h3 id="网页显示异常" tabindex="-1"><a class="header-anchor" href="#网页显示异常" aria-hidden="true">#</a> 网页显示异常</h3><p>如果你的网站只显示文字而不能正常显示网页，可能是因为网站路径不正确导致的页面样式错误。比如，GitHub Page 提示访问链接 <code>https://xxx.github.io/yyy</code>，则需要将 <code>docs/.vuepress/config.ts</code> 中的 base 改为 <code>/yyy</code>，其默认值为 <code>/</code>。请按照此路径将网站的 base 设置正确，以确保你的网站能够正常显示。</p><h3 id="同步服务器报错" tabindex="-1"><a class="header-anchor" href="#同步服务器报错" aria-hidden="true">#</a> 同步服务器报错</h3>',4);function S(D,A){const s=i("ExternalLinkIcon");return c(),l("div",null,[d,e("p",null,[n("如果你不需要将文档同步到服务器的 FTP 上，则请删除 "),p,n(" 中 Sync files 区块的代码，以避免出现报错。或者根据 "),e("a",u,[n("GitHub 同步到 OSS"),t(s)]),n(" 步骤将网页部署到云存储上。")]),h,m,b,e("ol",null,[e("li",null,[e("p",null,[n("点击 "),e("a",v,[k,t(s)]),n(" 或将 "),g,n(" 中的 "),_,n(" 改为 "),f,n("，然后会跳转至 Vercel 进行网页部署。如果你未登录，Vercel 提示你注册或登录，请使用 GitHub 账户进行快捷登录。")])]),y,e("li",null,[x,e("ul",null,[e("li",null,[n("新建 "),e("a",V,[n("Personal access tokens"),t(s)]),n("，勾选权限「repo (Full control of private repositories)」，生成后复制 token 值。")]),P,L]),w])]),G])}const F=o(r,[["render",S],["__file","index.html.vue"]]);export{F as default};
